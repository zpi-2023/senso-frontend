/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/account": {
    /** Returns the id of user's account */
    get: {
      responses: {
        /** @description Returns the id of user's account */
        200: {
          content: {
            "text/plain": components["schemas"]["GetAccountDto"];
            "application/json": components["schemas"]["GetAccountDto"];
            "text/json": components["schemas"]["GetAccountDto"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /** Creates a new account */
    post: {
      /** @description Data needed to create an account */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CreateAccountDto"];
          "text/json": components["schemas"]["CreateAccountDto"];
          "application/*+json": components["schemas"]["CreateAccountDto"];
        };
      };
      responses: {
        /** @description Account successfully created */
        204: {
          content: never;
        };
        /** @description If DTO validation failed */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If an email is already taken */
        409: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/v1/account/token": {
    /** Creates a token for an account to log in */
    post: {
      /** @description Credentials */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["GetAccountByCredentialsDto"];
          "text/json": components["schemas"]["GetAccountByCredentialsDto"];
          "application/*+json": components["schemas"]["GetAccountByCredentialsDto"];
        };
      };
      responses: {
        /** @description Returns token */
        200: {
          content: {
            "text/plain": components["schemas"]["TokenDto"];
            "application/json": components["schemas"]["TokenDto"];
            "text/json": components["schemas"]["TokenDto"];
          };
        };
        /** @description Credentials are invalid */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/v1/dashboard/{seniorId}": {
    /** Returns dashboard for a given senior */
    get: {
      parameters: {
        path: {
          /** @description Id of a senior */
          seniorId: number;
        };
      };
      responses: {
        /** @description Returns dashboard for a given senior */
        200: {
          content: {
            "text/plain": components["schemas"]["DashboardDto"];
            "application/json": components["schemas"]["DashboardDto"];
            "text/json": components["schemas"]["DashboardDto"];
          };
        };
        /** @description If validation failed */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /** Updates dashboard for a given senior */
    put: {
      parameters: {
        path: {
          /** @description Id of a senior */
          seniorId: number;
        };
      };
      /** @description Updated dashboard */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["DashboardDto"];
          "text/json": components["schemas"]["DashboardDto"];
          "application/*+json": components["schemas"]["DashboardDto"];
        };
      };
      responses: {
        /** @description Dashboard successfully updated */
        204: {
          content: never;
        };
        /** @description If validation failed */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/v1/games/{gameName}/score": {
    /** Returns user's best score in a given game */
    get: {
      parameters: {
        path: {
          /** @description The name of a game */
          gameName: string;
        };
      };
      responses: {
        /** @description Returns dashboard for a given senior */
        200: {
          content: {
            "text/plain": components["schemas"]["ScoreDto"];
            "application/json": components["schemas"]["ScoreDto"];
            "text/json": components["schemas"]["ScoreDto"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If the name of a game was not found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /** Updates user's best score in the given game if the new score is better */
    post: {
      parameters: {
        path: {
          /** @description The name of a game */
          gameName: string;
        };
      };
      /** @description Achieved score */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ScoreDto"];
          "text/json": components["schemas"]["ScoreDto"];
          "application/*+json": components["schemas"]["ScoreDto"];
        };
      };
      responses: {
        /** @description Returns dashboard for a given senior */
        200: {
          content: never;
        };
        /** @description No Content */
        204: {
          content: never;
        };
        /** @description If validation failed */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If the name of a game was not found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/v1/games/{gameName}/leaderboard": {
    /** Returns leaderbord */
    get: {
      parameters: {
        query?: {
          offset?: number;
          limit?: number;
        };
        path: {
          /** @description The name of a game */
          gameName: string;
        };
      };
      responses: {
        /** @description Returns part of the leaderboard */
        200: {
          content: {
            "text/plain": components["schemas"]["LeaderboardEntryDtoPaginatedDto"];
            "application/json": components["schemas"]["LeaderboardEntryDtoPaginatedDto"];
            "text/json": components["schemas"]["LeaderboardEntryDtoPaginatedDto"];
          };
        };
        /** @description If the name of a game was not found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/v1/healthz": {
    /** Returns the status of the services */
    get: {
      responses: {
        /** @description Returns status of the services */
        200: {
          content: {
            "text/plain": components["schemas"]["HealthcheckDto"];
            "application/json": components["schemas"]["HealthcheckDto"];
            "text/json": components["schemas"]["HealthcheckDto"];
          };
        };
      };
    };
  };
  "/api/v1/intakes/senior/{seniorId}": {
    /** Returns intakes for a senior with a given id */
    get: {
      parameters: {
        query?: {
          offset?: number;
          limit?: number;
        };
        path: {
          /** @description Id of a senior whose reminders are to be returned */
          seniorId: number;
        };
      };
      responses: {
        /** @description Returns intakes for a senior with a given id */
        200: {
          content: {
            "text/plain": components["schemas"]["IntakeDtoPaginatedDto"];
            "application/json": components["schemas"]["IntakeDtoPaginatedDto"];
            "text/json": components["schemas"]["IntakeDtoPaginatedDto"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user does not have a profile needed to access this senior's reminders and their intakes */
        403: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/v1/intakes/reminder/{reminderId}": {
    /** Returns intakes for a reminer with a given id */
    get: {
      parameters: {
        query?: {
          offset?: number;
          limit?: number;
        };
        path: {
          /** @description Id of a reminder */
          reminderId: number;
        };
      };
      responses: {
        /** @description Returns paginated intakes for a reminder with a given id */
        200: {
          content: {
            "text/plain": components["schemas"]["IntakeDtoPaginatedDto"];
            "application/json": components["schemas"]["IntakeDtoPaginatedDto"];
            "text/json": components["schemas"]["IntakeDtoPaginatedDto"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user does not have a profile needed to access this reminder */
        403: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If reminder with given id does not exist in the database */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /** Creates a new intake record for a reminder with a given id */
    post: {
      parameters: {
        path: {
          /** @description Id of a reminder */
          reminderId: number;
        };
      };
      /** @description Information about intake */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CreateIntakeDto"];
          "text/json": components["schemas"]["CreateIntakeDto"];
          "application/*+json": components["schemas"]["CreateIntakeDto"];
        };
      };
      responses: {
        /** @description Returns newly created intake record */
        201: {
          content: {
            "text/plain": components["schemas"]["IntakeDto"];
            "application/json": components["schemas"]["IntakeDto"];
            "text/json": components["schemas"]["IntakeDto"];
          };
        };
        /** @description If validation failed */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user does not have a profile needed to access this reminder */
        403: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If reminder with given id does not exist in the database */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/v1/intakes/{intakeId}": {
    /** Returns intake with a given id */
    get: {
      parameters: {
        path: {
          /** @description Id of an intake */
          intakeId: number;
        };
      };
      responses: {
        /** @description Returns intake with a given id */
        200: {
          content: {
            "text/plain": components["schemas"]["IntakeDto"];
            "application/json": components["schemas"]["IntakeDto"];
            "text/json": components["schemas"]["IntakeDto"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user does not have a profile needed to access this intake */
        403: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If intake with given id does not exist in the database */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/v1/notes": {
    /** Creates a new note */
    post: {
      /** @description Data needed to create note */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpsertNoteDto"];
          "text/json": components["schemas"]["UpsertNoteDto"];
          "application/*+json": components["schemas"]["UpsertNoteDto"];
        };
      };
      responses: {
        /** @description Returns newly created note */
        201: {
          content: {
            "text/plain": components["schemas"]["NoteDto"];
            "application/json": components["schemas"]["NoteDto"];
            "text/json": components["schemas"]["NoteDto"];
          };
        };
        /** @description If validation failed */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user does not have a senior profile */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/v1/notes/senior/{seniorId}": {
    /** Returns all senior's notes */
    get: {
      parameters: {
        path: {
          /** @description Id of a senior */
          seniorId: number;
        };
      };
      responses: {
        /** @description Returns list of notes */
        200: {
          content: {
            "text/plain": components["schemas"]["NoteListDto"];
            "application/json": components["schemas"]["NoteListDto"];
            "text/json": components["schemas"]["NoteListDto"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/v1/notes/{noteId}": {
    /** Returns note with a given id */
    get: {
      parameters: {
        path: {
          /** @description Id of a note */
          noteId: number;
        };
      };
      responses: {
        /** @description Returns note with a given id */
        200: {
          content: {
            "text/plain": components["schemas"]["NoteDto"];
            "application/json": components["schemas"]["NoteDto"];
            "text/json": components["schemas"]["NoteDto"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user is not allowed to access the note with a given id */
        403: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If note with a given id was not found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /** Updates note with a given id */
    put: {
      parameters: {
        path: {
          /** @description Id of a note */
          noteId: number;
        };
      };
      /** @description Data needed to update the note */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpsertNoteDto"];
          "text/json": components["schemas"]["UpsertNoteDto"];
          "application/*+json": components["schemas"]["UpsertNoteDto"];
        };
      };
      responses: {
        /** @description Returns updated note */
        200: {
          content: {
            "text/plain": components["schemas"]["NoteDto"];
            "application/json": components["schemas"]["NoteDto"];
            "text/json": components["schemas"]["NoteDto"];
          };
        };
        /** @description If validation failed */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user is not allowed to access the note with a given id */
        403: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If note with a given id was not found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /** Deletes note with a given id */
    delete: {
      parameters: {
        path: {
          /** @description Id of a note */
          noteId: number;
        };
      };
      responses: {
        /** @description Returns updated note */
        204: {
          content: never;
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user is not allowed to access the note with a given id */
        403: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If note with a given id was not found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/v1/profiles": {
    /** Returns all the profiles for user account */
    get: {
      responses: {
        /** @description Returns profiles for user's account */
        200: {
          content: {
            "text/plain": components["schemas"]["ProfilesDto"];
            "application/json": components["schemas"]["ProfilesDto"];
            "text/json": components["schemas"]["ProfilesDto"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/v1/profiles/senior": {
    /** Creates a new senior profile */
    post: {
      responses: {
        /** @description Returns newly created senior profile */
        200: {
          content: {
            "text/plain": components["schemas"]["ProfileDisplayDto"];
            "application/json": components["schemas"]["ProfileDisplayDto"];
            "text/json": components["schemas"]["ProfileDisplayDto"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user's account already has a senior profile */
        409: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /** Deletes senior profile */
    delete: {
      responses: {
        /** @description Profile was successfully deleted */
        204: {
          content: never;
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If this senior has any caretaker linked to them */
        403: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user's account does not have a senior profile */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/v1/profiles/senior/pairing": {
    /** Returns data needed to pair senior with their caretaker */
    get: {
      responses: {
        /** @description Returns encoded senior data */
        200: {
          content: {
            "text/plain": components["schemas"]["EncodedSeniorDto"];
            "application/json": components["schemas"]["EncodedSeniorDto"];
            "text/json": components["schemas"]["EncodedSeniorDto"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user's account does not have a senior profile */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/v1/profiles/senior/caretakers": {
    /** Returns all the caretakers for the senior */
    get: {
      responses: {
        /** @description Returns all of the senior's caretakers */
        200: {
          content: {
            "text/plain": components["schemas"]["ExtendedProfilesDto"];
            "application/json": components["schemas"]["ExtendedProfilesDto"];
            "text/json": components["schemas"]["ExtendedProfilesDto"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user's account does not have a senior profile */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/v1/profiles/caretaker": {
    /** Creates a new caretaker profile for the user */
    post: {
      /** @description Data needed to pair caretaker with the senior */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CreateCaretakerProfileDto"];
          "text/json": components["schemas"]["CreateCaretakerProfileDto"];
          "application/*+json": components["schemas"]["CreateCaretakerProfileDto"];
        };
      };
      responses: {
        /** @description Returns newly created caretaker profile */
        200: {
          content: {
            "text/plain": components["schemas"]["ProfileDisplayDto"];
            "application/json": components["schemas"]["ProfileDisplayDto"];
            "text/json": components["schemas"]["ProfileDisplayDto"];
          };
        };
        /** @description If user tried to create caretaker profile for themself */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If senior profile user wanted to pair with does not exist */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user already has a caretaker profile for this senior */
        409: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/v1/profiles/caretaker/{seniorId}/{caretakerId}": {
    /** Deletes given caretaker profile */
    delete: {
      parameters: {
        path: {
          /** @description Id of a senior */
          seniorId: number;
          /** @description Id of a caretaker */
          caretakerId: number;
        };
      };
      responses: {
        /** @description Returns newly created caretaker profile */
        200: {
          content: never;
        };
        /** @description No Content */
        204: {
          content: never;
        };
        /** @description If validation failed */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If given profile was not found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/v1/profiles/caretaker/{seniorId}": {
    /** Updates senior alias in caretaker profile */
    put: {
      parameters: {
        path: {
          seniorId: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["EditCaretakerProfileDto"];
          "text/json": components["schemas"]["EditCaretakerProfileDto"];
          "application/*+json": components["schemas"]["EditCaretakerProfileDto"];
        };
      };
      responses: {
        /** @description Returns updated caretaker profile */
        200: {
          content: {
            "text/plain": components["schemas"]["ProfileDisplayDto"];
            "application/json": components["schemas"]["ProfileDisplayDto"];
            "text/json": components["schemas"]["ProfileDisplayDto"];
          };
        };
        /** @description If validation failed */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user's account doesn't have specified caretaker profile */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/v1/reminders/{reminderId}": {
    /** Returns reminder with a given id */
    get: {
      parameters: {
        path: {
          /** @description Id of a reminder to be returned */
          reminderId: number;
        };
      };
      responses: {
        /** @description Returns reminder with given id */
        200: {
          content: {
            "text/plain": components["schemas"]["ReminderDto"];
            "application/json": components["schemas"]["ReminderDto"];
            "text/json": components["schemas"]["ReminderDto"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user does not have a profile needed to access this reminder */
        403: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If reminder with given id does not exist in the database */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /** Updates reminder with a given id */
    put: {
      parameters: {
        path: {
          /** @description Id of a reminder to be returned */
          reminderId: number;
        };
      };
      /** @description Data to be updated */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateReminderDto"];
          "text/json": components["schemas"]["UpdateReminderDto"];
          "application/*+json": components["schemas"]["UpdateReminderDto"];
        };
      };
      responses: {
        /** @description Returns updated reminder */
        200: {
          content: {
            "text/plain": components["schemas"]["ReminderDto"];
            "application/json": components["schemas"]["ReminderDto"];
            "text/json": components["schemas"]["ReminderDto"];
          };
        };
        /** @description If validation failed */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user does not have a profile needed to access this reminder */
        403: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If reminder with given id does not exist in the database */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /** Deletes reminder with a given id */
    delete: {
      parameters: {
        path: {
          /** @description Id of a reminder */
          reminderId: number;
        };
      };
      responses: {
        /** @description If operation was successful */
        204: {
          content: never;
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user does not have a profile needed to access this reminder */
        403: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If reminder with given id does not exist in the database */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/v1/reminders/senior/{seniorId}": {
    /** Returns reminders for a senior with a given id */
    get: {
      parameters: {
        query?: {
          offset?: number;
          limit?: number;
        };
        path: {
          /** @description Id of a senior whose reminders are to be returned */
          seniorId: number;
        };
      };
      responses: {
        /** @description Returns reminders for a senior with a given id */
        200: {
          content: {
            "text/plain": components["schemas"]["ReminderDtoPaginatedDto"];
            "application/json": components["schemas"]["ReminderDtoPaginatedDto"];
            "text/json": components["schemas"]["ReminderDtoPaginatedDto"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user does not have a profile needed to access this senior's reminders */
        403: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /** Creates a new reminder for a senior with a given id */
    post: {
      parameters: {
        path: {
          /** @description Id of a senior */
          seniorId: number;
        };
      };
      /** @description Data used to create a new reminder */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CreateReminderDto"];
          "text/json": components["schemas"]["CreateReminderDto"];
          "application/*+json": components["schemas"]["CreateReminderDto"];
        };
      };
      responses: {
        /** @description Returns newly created reminder */
        201: {
          content: {
            "text/plain": components["schemas"]["ReminderDto"];
            "application/json": components["schemas"]["ReminderDto"];
            "text/json": components["schemas"]["ReminderDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user is not logged in */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description If user does not have a profile needed to access this senior's reminders */
        403: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/v1/reminders/medications": {
    /** Returns all medications that fit the search criteria */
    get: {
      parameters: {
        query?: {
          /** @description Search criteria (not case-sensitive) */
          search?: string;
        };
      };
      responses: {
        /** @description Medications that fit the search criteria */
        200: {
          content: {
            "text/plain": components["schemas"]["MedicationListDto"];
            "application/json": components["schemas"]["MedicationListDto"];
            "text/json": components["schemas"]["MedicationListDto"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    CreateAccountDto: {
      email: string;
      password: string;
      phoneNumber?: string | null;
      displayName: string;
    };
    CreateCaretakerProfileDto: {
      /** Format: int32 */
      hash: number;
      seniorAlias: string;
    };
    CreateIntakeDto: {
      /** Format: date-time */
      takenAt: string;
      /** Format: float */
      amountTaken: number;
    };
    CreateReminderDto: {
      medicationName: string;
      /** Format: float */
      medicationAmountInPackage?: number | null;
      /** Format: float */
      amountPerIntake: number;
      /** Format: float */
      amountOwned?: number | null;
      amountUnit?: string | null;
      cron?: string | null;
      description?: string | null;
    };
    DashboardDto: {
      gadgets: string[];
    };
    EditCaretakerProfileDto: {
      seniorAlias: string;
    };
    EncodedSeniorDto: {
      /** Format: int32 */
      hash: number;
      seniorDisplayName: string;
      /** Format: int32 */
      validFor: number;
    };
    ExtendedProfileDto: {
      /** Format: int32 */
      accountId: number;
      /** Format: int32 */
      seniorId: number;
      type: string;
      displayName: string;
      email: string;
      phoneNumber?: string | null;
    };
    ExtendedProfilesDto: {
      profiles: components["schemas"]["ExtendedProfileDto"][];
    };
    GetAccountByCredentialsDto: {
      email: string;
      password: string;
    };
    GetAccountDto: {
      /** Format: int32 */
      id: number;
      email: string;
      displayName: string;
      phoneNumber?: string | null;
    };
    HealthcheckDto: {
      server?: components["schemas"]["HealthcheckStatus"];
      database?: components["schemas"]["HealthcheckStatus"];
    };
    /** @enum {string} */
    HealthcheckStatus: "Ok" | "Unhealthy";
    IntakeDto: {
      /** Format: int32 */
      id: number;
      /** Format: int32 */
      reminderId: number;
      medicationName: string;
      /** Format: date-time */
      takenAt: string;
      /** Format: float */
      amountTaken: number;
      amountUnit?: string | null;
    };
    IntakeDtoPaginatedDto: {
      items: components["schemas"]["IntakeDto"][];
    };
    LeaderboardEntryDto: {
      displayName: string;
      /** Format: int32 */
      accountId: number;
      /** Format: int32 */
      score: number;
    };
    LeaderboardEntryDtoPaginatedDto: {
      items: components["schemas"]["LeaderboardEntryDto"][];
    };
    MedicationDto: {
      name: string;
      /** Format: float */
      amountInPackage?: number | null;
      amountUnit?: string | null;
    };
    MedicationListDto: {
      medications: components["schemas"]["MedicationDto"][];
    };
    NoteDto: {
      /** Format: int32 */
      id: number;
      content: string;
      /** Format: date-time */
      createdAt: string;
      isPrivate: boolean;
      title?: string | null;
    };
    NoteListDto: {
      notes: components["schemas"]["NoteDto"][];
    };
    ProblemDetails: {
      type?: string | null;
      title?: string | null;
      /** Format: int32 */
      status?: number | null;
      detail?: string | null;
      instance?: string | null;
      [key: string]: unknown;
    };
    ProfileDisplayDto: {
      type: string;
      /** Format: int32 */
      seniorId: number;
      seniorAlias: string;
    };
    ProfilesDto: {
      profiles: components["schemas"]["ProfileDisplayDto"][];
    };
    ReminderDto: {
      /** Format: int32 */
      id: number;
      /** Format: int32 */
      seniorId: number;
      medicationName: string;
      /** Format: float */
      medicationAmountInPackage?: number | null;
      isActive: boolean;
      /** Format: float */
      amountPerIntake: number;
      /** Format: float */
      amountOwned?: number | null;
      amountUnit?: string | null;
      cron?: string | null;
      description?: string | null;
    };
    ReminderDtoPaginatedDto: {
      items: components["schemas"]["ReminderDto"][];
    };
    ScoreDto: {
      /** Format: int32 */
      score: number;
    };
    TokenDto: {
      token: string;
      /** Format: int32 */
      accountId: number;
    };
    UpdateReminderDto: {
      /** Format: float */
      amountPerIntake: number;
      /** Format: float */
      amountOwned?: number | null;
      cron?: string | null;
      description?: string | null;
    };
    UpsertNoteDto: {
      content: string;
      isPrivate: boolean;
      title?: string | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
